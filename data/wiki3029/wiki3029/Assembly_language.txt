Such systems must eliminate sources of unpredictable delays, which may be created by (some) interpreted languages, automatic garbage collection, paging operations, or preemptive multitasking.
* In an embedded processor or DSP, high-repetition interrupts require the shortest number of cycles per interrupt, such as an interrupt that occurs 1000 or 10000 times a second.
In the case of speed optimization, modern optimizing compilers are claimed  to render high-level languages into code that can run as fast as hand-written assembly, despite the counter-examples that can be found.
However, by the 1980s (1990s on microcomputers), their use had largely been supplanted by higher-level languages, in the search for improved programming productivity.
; use the Masm32 library
Most full-featured assemblers also provide a rich macro language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.
Despite different appearances, different syntactic forms generally generate the same numeric machine code, see further below.
* Situations where no high-level language exists, on a new or specialized processor, for example.
Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions.
Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting self-documenting code.
Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a disassembler.
The assembler supported the usual symbolic addressing and the definition of character strings or hex strings.
The syntax of MOV can also be more complex as the following examples show.
The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications.
Assembly languages eliminate much of the error-prone, tedious, and time-consuming first-generation programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses.
Sometimes, some assemblers can read another assembler's dialect, for example, TASM can read old MASM code, but not the reverse.
It also allows address expressions which can be combined with addition, subtraction, multiplication, division, logical AND, logical OR, and exponentiation operators.
This could be used to generate record-style data structures or "unrolled" loops, for example, or could generate entire algorithms based on complex parameters.
* Self-modifying code, to which assembly language lends itself well.
An emulator can be used to debug assembly-language programs.
* Reverse-engineering and modifying program files such as
Such fundamental topics as binary arithmetic, memory allocation, stack processing, character set encoding, interrupt processing, and compiler design would be hard to study in detail without a grasp of how a computer operates at the hardware level.
Assembly languages, and the use of the word '''assembly''',  date to the introduction of the stored-program computer.
linear algebra with BLAS or discrete cosine transformation (e.g.
According to some industry insiders, the assembly language was the best computer language to use to get the best performance out of the Sega Saturn, a console that was notoriously challenging to develop and program games for.
This was a way to reduce or eliminate the use of GOTO operations in assembly code, one of the main factors causing spaghetti code in assembly language.
Within processor groups, each assembler has its own dialect.
The arcade game NBA Jam (1993) is another example.
SIMD assembly version from x264)
'''Example:''' in the following code snippet a one-pass assembler would be able to determine the address of the backward reference BKWD when assembling statement S2, but would not be able to determine the address of the forward reference FWD when assembling the branch statement S1; indeed FWD may be undefined.
An '''assembly''' (or '''assembler''') '''language''', often abbreviated '''asm''', is a low-level programming language for a computer, or other programmable device, in which there is a very strong (generally one-to-one) correspondence between the language and the architecture's machine code instructions.
Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details.
A common example is the bitwise rotation instruction at the core of many encryption algorithms, as well as querying the parity of a byte or the 4-bit carry of an addition.
* Programs that need to use processor-specific instructions not implemented in a compiler.
Operands can be immediate (value coded in the instruction itself), registers specified in the instruction or implied, or the addresses of data located elsewhere in storage.
MOV AL, 61h       ; Load AL with 97 decimal (61 hex)
For example, the instruction below tells an x86/IA-32 processor to move an immediate 8-bit value into a register.
They define the type of data, the length and the alignment of data.
For instance, with some Z80 assemblers the instruction  is recognized to generate  followed by .
This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand, the assembler will make a pessimistic estimate when first encountering the operation, and if necessary pad it with one or more "no-operation" instructions in a later pass or the errata.
The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name.
For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose.
Each instruction typically consists of an ''operation'' or ''opcode'' plus zero or more ''operands''.
Sometimes the term ''pseudo-opcode'' is reserved for directives that generate object code, such as those that generate data.
The concept of macro processing appeared, and appears, in the C programming language, which supports "preprocessor instructions" to set variables, and make conditional tests on their values.
They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features.
This is because each mnemonic along with the addressing modes and operands of an instruction translates rather directly into the numeric representations of that particular instruction, without much context or analysis.
SOAP (Symbolic Optimal Assembly Program) was an assembly language for the IBM 650 computer written by Stan Poley in 1955.
Assembly language may also be called ''symbolic machine code''.
The original reason for the use of one-pass assemblers was speed of assembly – often a second pass would require rewinding and rereading the program source on tape or rereading a deck of cards or punched paper tape.
* A stand-alone executable of compact size is required that must execute without recourse to the run-time components or libraries associated with a high-level language; this is perhaps the most common situation.
Assembler can be used to optimize for speed or optimize for size.
Assembling these macros generates a job stream to build the system, including job control language and utility control statements.
Most assemblers also include macro facilities for performing textual substitution – e.g., to generate common short sequences of instructions as inline, instead of ''called'' subroutines.
** real-time programs such as simulations, flight navigation systems, and medical equipment.
These are sometimes known as ''pseudo-opcodes''.
The x86 opcode 10110000 (B0) copies an 8-bit value into the ''AL'' register, while 10110001 (B1) moves it into ''CL'' and 10110010 (B2) does so into ''DL''.
Underlining this point, macros were used to implement an early virtual machine in SNOBOL4 (1967), which was written in the SNOBOL Implementation Language (SIL), an assembly language for a virtual machine, which was then targeted to physical machines by transpiled to a native assembler via a macro assembler.
When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text).
* Programs that need precise timing such as
''Assembly time'' is the computational step where an assembler is run.
There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use.
For example, for a machine that lacks a "branch if greater or equal" instruction, an assembler may provide a pseudoinstruction that expands to the machine's "set if less than" and "branch if zero (on the result of the set instruction)".
There have also been several classes of translators and semi automatic code generators with properties similar to both assembly and high level languages, with speedcode as perhaps one of the better known examples.
There may be several assemblers with different syntax for a particular CPU or instruction set architecture.
This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works.
Directives affect how the assembler operates and "may affect the object code, the symbol table, the listing file, and the values of internal assembler parameters."
The names of pseudo-ops often start with a dot to distinguish them from machine instructions.
print "cases 1 to 3: other"
Unlike high-level languages, there is usually a one-to-one correspondence between simple assembly statements and machine language instructions.
Some disassemblers recognize this and will decode the  instruction as .
Each computer architecture has its own machine language.
MOV CL, 2h        ; Load CL with immediate value 2
Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems.
In both cases, the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent  symbols.
MOV ESI+EAX, CL ; Move the contents of CL into the byte at address ESI+EAX
Computers differ in the number and type of operations they support, in the different sizes and numbers of registers, and in the representations of data in storage.
This representation typically includes an ''operation code'' ("opcode") as well as other control bits and data.
An  instruction set simulator can process the object code/ binary of ''any'' assembler to achieve portability even across platforms with an overhead no greater than a typical bytecode interpreter.
Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine.
Also, assembly can sometimes be portable across different operating systems on the same type of CPU.
Typical examples of large assembly language programs from this time are IBM PC DOS operating systems and early applications such as the spreadsheet program Lotus 1-2-3.
In contrast, most high-level programming languages are generally portable across multiple architectures but require interpreting or compiling.
Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages.
** Video games (also termed ROM hacking), which is possible via several methods.
In assembly language, the term "macro" represents a more comprehensive concept than it does in some other contexts, such as in the C programming language, where its #define directive typically is used to create short single line macros.
The standard has since been withdrawn.
''The Assembler for the VIC-20'' was written by Don French and published by ''French Silk''.
Many commercial applications were written in assembly language as well, including a large amount of the IBM mainframe software written by large corporations.
This allowed a high degree of portability for the time.
FASM and NASM have similar syntax, but each support different macros that could make them difficult to translate to each other.
The conversion process is referred to as ''assembly'', or ''assembling'' the source code.
''Extended mnemonics'' are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use  as an extended mnemonic for  with a mask of 15 and  ("NO OPeration" – do nothing for one step) for  with a mask of 0.
The earliest example of this approach was in the Concept-14 macro set, originally proposed by Dr. Harlan Mills (March 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar control flow blocks.
While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences.
This was done, for example, by systems programmers working with IBM's Conversational Monitor System / Virtual Machine (VM/CMS) and with IBM's "real time transaction processing" add-ons, Customer Information Control System CICS, and ACP/TPF, the airline/financial system that began in the 1970s and still runs many large computer reservations systems (CRS) and credit card systems today.
A two-pass assembler would determine both addresses in pass 1, so they would be known when generating code in pass 2,
Similarly, IBM assemblers for System/360 and System/370 use the extended mnemonics  and  for  and  with zero masks.
These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined.
Most modern computers have similar instruction sets.
; generate a number between 0 and 8
The assembler also calculates constant expressions and resolves symbolic names for memory locations and other entities.
This approach was widely accepted in the early '80s (the latter days of large-scale assembly language use).
Labels can also be used to initialize constants and variables with relocatable addresses.
**existing binaries that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software.
Mnemonics are arbitrary symbols; in 1985 the IEEE published Standard 694 for a uniform set of mnemonics to be used by all assemblers.
In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.
Others may even do simple rearrangement or insertion of instructions, such as some assemblers for RISC architectures that can help optimize a sensible instruction scheduling to exploit the CPU pipeline as efficiently as possible.
The "raw" (uncommented) assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made.
This is similar to use of microcode to achieve compatibility across a processor family.
This was in large part because interpreted BASIC dialects on these systems offered insufficient execution speed, as well as insufficient facilities to take full advantage of the available hardware on these systems.
Assembler macro instructions, like macros in PL/I and some other languages, can be lengthy "programs" by themselves, executed by interpretation by the assembler during assembly.
There have always been debates over the usefulness and performance of assembly language relative to high-level languages.
However, some higher-level languages incorporate run-time components and operating system interfaces that can introduce such delays.
Some assemblers have incorporated structured programming elements to encode execution flow.
The language was classified as an assembler, because it worked with raw machine elements such as opcodes, registers, and memory references; but it incorporated an expression syntax to indicate execution order.
To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters.
For example, firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems, security systems, and sensors.
Typical uses are device drivers, low-level embedded systems, and real-time systems.
A typical assembly language consists of 3 types of instruction statements that are used to define program operations:
Macro assemblers often allow macros to take parameters.
Inside subroutines, GOTO destinations are given labels.
Calling conventions between operating systems often differ slightly or not at all, and with care it is possible to gain some portability in assembly language, usually by linking with a C library that does not change between operating systems.
Depending on the architecture, these elements may also be combined for specific instructions or addressing modes using offsets or other data as well as fixed addresses.
For example, in a fly-by-wire system, telemetry must be interpreted and acted upon within strict time constraints.
A curious design was A-natural, a "stream-oriented" assembler for 8080/Z80 processors from Whitesmiths Ltd. (developers of the Unix-like Idris operating system, and what was reported to be the first commercial C compiler).
Some assemblers, such as NASM provide flexible symbol management, letting programmers manage different namespaces, automatically calculate offsets within data structures, and assign labels that refer to literal values or the result of simple computations performed by the assembler.
This binary computer code can be made more human-readable by expressing it in hexadecimal as follows.
Thus a macro might generate numerous assembly language instructions or data definitions, based on the macro arguments.
Many assemblers support ''predefined macros'', and others support ''programmer-defined'' (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded.
Assembly language instructions usually consist of an opcode mnemonic followed by a list of data, arguments or parameters.
include \masm32\include\masm32rt.inc
Assembly languages, like most other computer languages, allow comments to be added to program source code that will be ignored during assembly.
This is much easier to read and to remember.
MOV DL, 3h        ; Load DL with immediate value 3
Like early programming languages such as Fortran, Algol, Cobol and Lisp, assemblers have been available since the 1950s and the first generations of text based computer interfaces.
A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans.
Some systems even have an integrated development environment (IDE) with highly advanced debugging and macro facilities.
Symbolic assemblers let programmers associate arbitrary names (''labels'' or ''symbols'') with memory locations and various constants.
It is also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in COBOL using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code.
Other assemblers may use separate opcode mnemonics such as L for "move memory to register", ST for "move register to memory", LR for "move register to register", MVI for "move immediate operand to memory", etc.
The complexity of modern processors and memory sub-systems makes effective optimization increasingly difficult for compilers, as well as assembly programmers.
Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions.
Instructions (statements) in assembly language are generally very simple, unlike those in high-level languages.
; loop until the sign flag is set
Perhaps more important was the lack of first-class high-level language compilers suitable for microcomputer use.
* Situations where complete control over the environment is required, in extremely high security situations where nothing can be taken for granted.
However, in some cases, an assembler may provide ''pseudoinstructions'' (essentially macros) which expand into several machine language instructions to provide commonly needed functionality.
In 8086 CPUs the instruction  is used for , with  being a pseudo-opcode to encode the instruction .
IBM OS/360 uses macros to perform system generation.
; in contrast to most other programming languages,
This has made raw code execution speed a non-issue for many programmers.
The user specifies options by coding a series of assembler macros.
A single assembler may also have different modes in order to support variations in syntactic forms as well as their exact semantic interpretations (such as FASM-syntax, TASM-syntax, ideal mode etc., in the special case of x86 assembly programming).
There are some situations in which developers might choose to use assembly language:
In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op).
An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements.
Therefore, studying a single assembly language is sufficient to learn: I) the basic concepts; II) to recognize situations where the use of assembly language might be appropriate; and III) to see how efficient executable code can be created from high-level languages.
Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information.
Some assemblers classify these as pseudo-ops.
Some assemblers support ''local symbols'' which are lexically distinct from normal symbols (e.g., the use of "10$" as a GOTO destination).
For the SPARC architecture, these are known as ''synthetic instructions''.
Assembly language for the 8086 family provides the mnemonic MOV (an abbreviation of ''move'') for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon.
For instance, an instruction to add memory data to a register in a x86-family processor might be add eax,ebx, in original ''Intel syntax'', whereas this would be written addl (%ebx),%eax in the ''AT&T syntax'' used by the GNU Assembler.
* Computer viruses, bootloaders, certain device drivers, or other items very close to the hardware or low-level operating system.
Or, a pseudo-op can be used to manipulate presentation of a program to make it easier to read and maintain.
Assembly language is still taught in most computer science and electronic engineering programs.
Some higher level computer languages, such as C and Borland Pascal, support inline assembly where sections of assembly code, in practice usually brief, can be embedded into the high level language code.
Another common use of pseudo-ops is to reserve storage areas for run-time data and optionally initialize their contents to known values.
Operating systems were entirely written in assembly language until the introduction of the Burroughs MCP (1961), which was written in Executive Systems Problem Oriented Language (ESPOL), an Algol dialect.
''Extended mnemonics'' are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name.
With modern computers this has ceased to be an issue.
Some assemblers may also be able to perform some simple types of instruction set-specific optimizations.
There are instructions used to define data elements to hold data and variables.
Assembly language has long been the primary development language for many popular home computers of the 1980s and 1990s (such as the MSX,  Sinclair ZX Spectrum, Commodore 64, Commodore Amiga, and Atari ST).
* Games and other software for graphing calculators.
Here, B0 means 'Move a copy of the following value into ''AL''', and 61 is a hexadecimal representation of the value 01100001, which is 97 in decimal.
Note that unlike certain previous macro processors inside assemblers, the C preprocessor is not Turing-complete because it lacks the ability to either loop or "go to", the latter allowing programs to loop.
Each assembly language is specific to a particular computer architecture.
The advantage of the multi-pass assembler is that the absence of errata makes the linking process (or the program load if the assembler directly produces executable code) faster.
The most widely employed method is altering program code at the assembly language level.
However, assemblers came first as they are far simpler to write than compilers for high-level languages.
Despite the power of macro processing, it fell into disuse in many high level languages (major exceptions being C/C++ and PL/I) while remaining a perennial for assemblers.
In each case, the MOV mnemonic is translated directly into an opcode in the ranges 88-8E, A0-A3, B0-B8, C6 or C7 by an assembler, and the programmer does not have to know or remember which.
Pseudo-ops can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled different ways, perhaps for different applications.
Once a macro has been defined its name may be used in place of a mnemonic.
Historically, numerous programs have been written entirely in assembly language.
A program written in assembly language consists of a series of (mnemonic) processor instructions and meta-statements (known variously as directives, pseudo-instructions and pseudo-ops), comments and data.
This sequence of text lines may include opcodes or directives.
Since a computer's behavior is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language.
In some assembly languages the same mnemonic such as MOV may be used for a family of related instructions for loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers.
In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name.
Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name.
Moreover, increasing processor performance has meant that most CPUs sit idle most of the time, with delays caused by predictable bottlenecks such as cache misses, I/O operations and paging.
Assembly language uses a mnemonic to represent each low-level machine instruction or operation, typically also each architectural register, flag, etc.
An '''assembler''' program creates object code by translating combinations of mnemonics and syntax for operations and addressing modes into their numerical equivalents.
The identifier for the ''AL'' register is 000, so the following machine code loads the ''AL'' register with the data 01100001.
The Forth language commonly contains an assembler used in CODE words.
Many assemblers offer additional mechanisms to facilitate program development, to control the assembly process, and to aid debugging.
Most of them are able to perform jump-instruction replacements (long jumps replaced by short or relative jumps) in any number of passes, on request.
